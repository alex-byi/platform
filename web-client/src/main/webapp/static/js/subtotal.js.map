{
  "version": 3,
  "file": "subtotal.js",
  "sourceRoot": "../../../../../../../",
  "sources": [
    "platform/web-client/src/main/webapp/static/js/subtotal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    class SubtotalPivotData extends $.pivotUtilities.PivotData\n        constructor: (input, opts) ->\n            super input, opts\n            \n            @rowAttrGroups = convertAttrsToGroups @rowAttrs, opts.rendererOptions.rowSubtotalDisplay.splitPositions\n            @rowAttrIndex = buildRowAttrsIndex @rowAttrGroups\n                \n        processKey = (record, totals, keys, attrs, getAggregator) ->\n            key = []\n            addKey = false\n            for attr in attrs\n                key.push record[attr] # ? \"null\"\n                flatKey = key.join String.fromCharCode(0)\n                if not totals[flatKey]\n                    totals[flatKey] = getAggregator key.slice()\n                    addKey = true\n                totals[flatKey].push record\n            keys.push key if addKey\n            return key\n\n        processRecord: (record) -> #this code is called in a tight loop\n            rowKey = []\n            colKey = []\n\n            @allTotal.push record\n            rowKey = processKey record, @rowTotals, @rowKeys, @rowAttrs, (key) =>\n                return @aggregator this, key, []\n            colKey = processKey record, @colTotals, @colKeys, @colAttrs, (key) =>\n                return @aggregator this, [], key\n            m = rowKey.length-1\n            n = colKey.length-1\n            return if m < 0 or n < 0\n            for i in [0..m]\n                fRowKey = rowKey.slice(0, i+1)\n                flatRowKey = fRowKey.join String.fromCharCode(0)\n                @tree[flatRowKey] = {} if not @tree[flatRowKey]\n                for j in [0..n]\n                    fColKey = colKey.slice 0, j+1\n                    flatColKey = fColKey.join String.fromCharCode(0)\n                    @tree[flatRowKey][flatColKey] = @aggregator this, fRowKey, fColKey if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey].push record\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @rowAttrsSortPredicate()\n\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @colOrder\n                    when \"value_a_to_z\" then @colKeys.sort (a,b) =>  $.pivotUtilities.naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -$.pivotUtilities.naturalSort v([],a), v([],b)\n                    else                     @colKeys.sort @arrSort(@colAttrs)\n\n        rowAttrsSortPredicate: () =>\n            groupPredicates = (@groupPredicate group for group in @rowAttrGroups)\n            @multiplePredicatesSort groupPredicates\n\n        groupPredicate: (attrGroup) =>\n            predicates = []\n            for sortItem in @sortItems\n                if typeof sortItem.value is 'string'\n                    if sortItem.value in attrGroup\n                        predicates.push @rowAxisPredicate sortItem\n                else\n                    lastKeyIndex = @rowAttrIndex[attrGroup[attrGroup.length-1]]\n                    predicates.push @valuePredicate sortItem, lastKeyIndex\n            if predicates.length == 0\n                predicates.push @defaultPredicate attrGroup, @rowAttrIndex      \n            @multiplePredicatesSort predicates\n        \n        rowAxisPredicate: (sortItem) =>\n            index = @rowAttrIndex[sortItem.value]\n            (a, b) ->\n                if sortItem.direction\n                    return $.pivotUtilities.naturalSort(a[index], b[index])\n                else\n                    return -$.pivotUtilities.naturalSort(a[index], b[index])\n            \n        valuePredicate: (sortItem, lastKeyIndex) =>\n            value = (r, c) => @getAggregator(r, c).value()\n            colKey = sortItem.value \n            (a, b) ->\n                if sortItem.direction\n                    return $.pivotUtilities.naturalSort(value(a[0..lastKeyIndex], colKey), value(b[0..lastKeyIndex], colKey))\n                else\n                    return -$.pivotUtilities.naturalSort(value(a[0..lastKeyIndex], colKey), value(b[0..lastKeyIndex], colKey))\n            \n        defaultPredicate: (attrGroup, rowAttrIndex) =>\n            (a, b) ->\n                for attr in attrGroup\n                    i = rowAttrIndex[attr]\n                    result = $.pivotUtilities.naturalSort(a[i], b[i])\n                    return result if result != 0\n                return 0\n            \n        multiplePredicatesSort: (predicates) =>\n            (a, b) ->\n                for predicate in predicates\n                    result = predicate(a, b)\n                    return result if result != 0\n                return 0\n\n        buildRowAttrsIndex = (attrGroups) =>\n            i = 0\n            index = {}\n            for attrGroup in attrGroups\n                for attr in attrGroup\n                    index[attr] = i\n                    ++i\n            return index        \n                \n        convertAttrsToGroups = (attrs, splitPositions) =>\n            attrGroups = []\n            prev = 0\n            for pos in splitPositions\n                attrGroups.push(attrs[prev..pos])\n                prev = pos + 1\n            return attrGroups\n            \n    $.pivotUtilities.SubtotalPivotData = SubtotalPivotData\n\n\n    SubtotalRenderer = (pivotData, opts) ->\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\", subtotalOf: \"Subtotal of\"\n            arrowCollapsed: \"\\u25B6\"\n            arrowExpanded: \"\\u25E2\"\n            rowSubtotalDisplay:\n                displayOnTop: true\n                collapseAt: 99999\n                hideOnExpand: false\n                disableExpandCollapse: false\n            colSubtotalDisplay:\n                displayOnTop: true\n                collapseAt: 99999\n                hideOnExpand: false\n                disableExpandCollapse: false\n        opts = $.extend true, {}, defaults, opts\n\n        opts.rowSubtotalDisplay.collapseAt = opts.collapseRowsAt if typeof opts.rowSubtotalDisplay.collapseAt isnt 'undefined' and opts.collapseRowsAt isnt null\n        opts.rowSubtotalDisplay.splitPositions = (i for i in [0...pivotData.rowAttrs.length]) if not opts.rowSubtotalDisplay.splitPositions?\n\n        opts.colSubtotalDisplay.collapseAt = opts.collapseColsAt if typeof opts.colSubtotalDisplay.collapseAt isnt 'undefined' and opts.collapseColsAt isnt null\n        opts.colSubtotalDisplay.splitPositions = (i for i in [0...pivotData.colAttrs.length]) if not opts.colSubtotalDisplay.splitPositions?\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n        tree = pivotData.tree\n        callbacks = pivotData.callbacks\n        rowTotals = pivotData.rowTotals\n        colTotals = pivotData.colTotals\n        allTotal = pivotData.allTotal\n\n        classRowHide = \"rowhide\"\n        classRowShow = \"rowshow\"\n        classColHide = \"colhide\"\n        classColShow = \"colshow\"\n        clickStatusExpanded = \"expanded\"\n        clickStatusCollapsed = \"collapsed\"\n        classExpanded = \"expanded\"\n        classCollapsed = \"collapsed\"\n        classZoom = \"zoom\"\n        classRowExpanded = \"rowexpanded\"\n        classRowCollapsed = \"rowcollapsed\"\n        classColExpanded = \"colexpanded\"\n        classColCollapsed = \"colcollapsed\"\n        arrowExpanded = opts.arrowExpanded\n        arrowCollapsed = opts.arrowCollapsed\n        \n        rowSplitPositions = opts.rowSubtotalDisplay.splitPositions\n        rowGroups = pivotData.rowAttrGroups\n        \n        rowArrowsPadding = 5\n        rowArrowsLevelPadding = 10\n        \n        hideColAxisHeadersColumn = opts.hideColAxisHeadersColumn ? false\n        hideColsTotalRow = opts.hideColsTotalsRow ? false\n        hideRowsTotalsCol = opts.hideRowsTotalsCol ? false\n        \n        emptyTopAttrTH = null\n        \n        # Based on http://stackoverflow.com/questions/195951/change-an-elements-class-with-javascript -- Begin\n        hasClass = (element, className) ->\n            regExp = new RegExp \"(?:^|\\\\s)\" + className + \"(?!\\\\S)\", \"g\"\n            element.className.match(regExp) isnt null\n\n        removeClass = (element, className) ->\n            for name in className.split \" \"\n                regExp = new RegExp \"(?:^|\\\\s)\" + name + \"(?!\\\\S)\", \"g\"\n                element.className = element.className.replace regExp, ''\n\n        addClass = (element, className) ->\n            for name in className.split \" \"\n                element.className += (\" \" + name) if not hasClass element, name\n\n        replaceClass = (element, replaceClassName, byClassName) ->\n            removeClass element, replaceClassName\n            addClass element, byClassName\n        # Based on http://stackoverflow.com/questions/195951/change-an-elements-class-with-javascript -- End \n\n        createElement = (elementType, className, attributes, eventHandlers) ->\n            e = document.createElement elementType\n            e.className = className if className?\n            e.setAttribute attr, val for own attr, val of attributes if attributes?\n            e.addEventListener event, handler for own event, handler of eventHandlers if eventHandlers?\n            return e\n\n        createValueTD = (value, rowKey, colKey, aggregator, className, attributes, eventHandlers) ->\n            td = createElement \"td\", className, attributes, eventHandlers\n            td.onmousedown = (event) -> if event.detail > 1 then event.preventDefault() if callbacks?\n            td.ondblclick = (event) -> callbacks.valueCellDblClickHandler event, td, rowKey, colKey if callbacks?\n            renderValueCell td, value, rowKey, colKey, aggregator\n            return td\n\n        renderValueCell = (td, value, rowKey, colKey, aggregator) ->\n            if callbacks?\n                callbacks.renderValueCell td, value, rowKey, colKey\n            else\n                td.textContent = aggregator.format(value)\n        \n        createArrowAndTextDivs = (th, arrowClass, textClass) ->\n            wrapperDiv = createElement \"div\", \"wrapperDiv fill-parent-perc\"\n            th.append wrapperDiv\n\n            arrowDiv = createElement \"div\", arrowClass\n            wrapperDiv.appendChild arrowDiv\n            th.arrowDiv = arrowDiv\n\n            textDiv = createElement \"div\", textClass\n            wrapperDiv.appendChild textDiv\n            th.textDiv = textDiv;\n                \n        createColAxisHeaderTH = (attr, className, textContent, isExpanded, attributes) ->\n            th = createElement \"th\", className, attributes\n            textElement = th\n            if isExpanded?\n                createArrowAndTextDivs th, \"axisHeaderArrowDiv\", \"axisHeaderTextDiv\"\n                textElement = th.textDiv\n\n            textElement.onmousedown = (event) -> if event.detail > 1 then event.preventDefault() if callbacks?\n            textElement.ondblclick = (event) -> callbacks.colAxisHeaderDblClickHandler event, textElement, attr if callbacks?\n            renderColAxisHeader th, textContent, attr, isExpanded, false\n            return th\n            \n        renderColAxisHeader = (th, textContent, attr, isExpanded, arrowOnly) ->\n            if isExpanded?\n                if callbacks?\n                    callbacks.renderAxisHeaderCell th.arrowDiv, textContent, attr, isExpanded, true\n                    if not arrowOnly\n                        callbacks.renderAxisHeaderCell th.textDiv, textContent, attr, isExpanded, false\n                else\n                    th.arrowDiv.textContent = arrowText isExpanded\n                    if not arrowOnly\n                        th.textDiv.textContent = textContent\n            else if callbacks?                     \n                callbacks.renderAxisHeaderCell th, textContent, attr, isExpanded, false\n            else\n                th.textContent = textContent\n\n        createRowAxisHeaderTH = (attr, className, textContent, isArrow, isExpanded, attributes) ->\n            th = createElement \"th\", className, attributes\n            if not isArrow\n                th.onmousedown = (event) -> if event.detail > 1 then event.preventDefault() if callbacks?\n                th.ondblclick = (event) -> callbacks.rowAxisHeaderDblClickHandler event, th, attr if callbacks?\n            renderRowAxisHeader th, textContent, attr, isArrow, isExpanded\n            return th\n            \n        renderRowAxisHeader = (th, textContent, attr, isArrow, isExpanded) ->\n            if callbacks?\n                callbacks.renderAxisHeaderCell th, textContent, attr, isExpanded, isArrow\n            else\n                th.textContent = if isArrow then arrowText isExpanded else textContent\n                \n        createRowAttrHeaderTH = (rowKey, cellAttr, className, value, isArrow, isExpanded, isLastChildList, attributes) ->\n            th = createElement \"th\", className, attributes\n            if not isArrow\n                th.onmousedown = (event) -> if event.detail > 1 then event.preventDefault() if callbacks?\n                th.onclick = (event) -> callbacks.rowAttrHeaderClickHandler event, th, rowKey, cellAttr if callbacks?\n            renderRowAttrHeader th, value, rowKey, cellAttr, isArrow, isExpanded, isLastChildList\n            return th\n\n        renderRowAttrHeader = (th, value, rowKey, cellAttr, isArrow, isExpanded, isLastChildList) ->\n            if callbacks?\n                callbacks.renderRowAttrHeaderCell th, value, rowKey, cellAttr, isExpanded, isArrow, isLastChildList\n            else \n                th.textContent = if isArrow then arrowText isExpanded else value\n            \n        createColAttrHeaderTH = (colKey, isSubtotal, className, value, isExpanded, colsData, attributes) ->\n            th = createElement \"th\", className, attributes\n            textElement = th\n            if isExpanded?\n                createArrowAndTextDivs th, \"colAttrHeaderArrowDiv\", \"colAttrHeaderTextDiv\"\n                textElement = th.textDiv\n\n            textElement.onmousedown = (event) -> if event.detail > 1 then event.preventDefault() if callbacks?\n            textElement.onclick = (event) -> callbacks.colAttrHeaderClickHandler event, textElement, colKey, isSubtotal if callbacks?\n            if colKey.length == colAttrs.length or isSubtotal or colKey.length == 0\n                colsData.push { width : getColumnWidth(true, colKey, null, false), colnode : attributes[\"data-colnode\"] }      \n            renderColAttrHeader th, value, colKey, isSubtotal, isExpanded, false\n            return th\n\n        renderColAttrHeader = (th, value, colKey, isSubtotal, isExpanded, arrowOnly) ->\n            if isExpanded?\n                if callbacks?\n                    callbacks.renderColAttrHeaderCell th.arrowDiv, value, colKey, isSubtotal, isExpanded, true\n                    if not arrowOnly\n                        callbacks.renderColAttrHeaderCell th.textDiv, value, colKey, isSubtotal, isExpanded, false\n                else\n                    th.arrowDiv.textContent = arrowText isExpanded\n                    if not arrowOnly\n                        th.textDiv.textContent = value if not arrowOnly\n            else if callbacks?\n                callbacks.renderColAttrHeaderCell th, value, colKey, isSubtotal, isExpanded, false\n            else\n                th.textContent = value\n        \n        arrowText = (isExpanded) ->\n          if isExpanded == true\n              return \" #{arrowExpanded} \"\n          else if isExpanded == false\n              return \" #{arrowCollapsed} \"\n          else\n              return \"\"\n              \n        setAttributes = (e, attrs) ->\n            e.setAttribute a, v for own a, v of attrs\n\n        processColKeys = (keysArr) ->\n            lastIdx = keysArr[0].length-1\n            headers = children: []\n            row = 0\n            keysArr.reduce(\n                (val0, k0) => \n                    col = 0\n                    k0.reduce(\n                        (acc, curVal, curIdx) => \n                            if not acc[curVal]\n                                key = k0.slice 0, col+1\n                                acc[curVal] =\n                                    row: row\n                                    col: col\n                                    descendants: 0\n                                    children: []\n                                    value: curVal\n                                    key: key \n                                    flatKey: key.join String.fromCharCode(0) \n                                    firstLeaf: null \n                                    leaves: 0\n                                    parent: if col isnt 0 then acc else null\n                                    childrenSpan: 0\n                                acc.children.push curVal\n                            if col > 0 \n                                acc.descendants++\n                            col++\n                            if curIdx == lastIdx\n                                node = headers\n                                for i in [0..lastIdx-1] when lastIdx > 0\n                                    node[k0[i]].leaves++\n                                    if not node[k0[i]].firstLeaf \n                                        node[k0[i]].firstLeaf = acc[curVal]\n                                    node = node[k0[i]]\n                                return headers\n                            return acc[curVal]\n                        headers)\n                    row++\n                    return headers\n                headers)\n            return headers\n\n        processRowKeys = (keysArr, className, splitPositions) ->\n            lastIdx = keysArr[0].length-1\n            headers = children: []\n            row = 0\n            keysArr.reduce(\n                (val0, k0) => \n                    col = 0\n                    curElement = []\n                    k0.reduce(\n                        (acc, curVal, curIdx) => \n                            curElement.push curVal\n                            if splitPositions.indexOf(curIdx) != -1\n                                flatCurElement = curElement.join String.fromCharCode(0)\n                                if not acc[flatCurElement] \n                                    key = k0.slice 0, curIdx+1\n                                    acc[flatCurElement] =\n                                        row: row\n                                        col: col\n                                        descendants: 0\n                                        children: []\n                                        values: curElement\n                                        text: flatCurElement\n                                        key: key \n                                        flatKey: key.join String.fromCharCode(0)\n                                        firstLeaf: null \n                                        leaves: 0\n                                        parent: if col isnt 0 then acc else null\n                                        childrenSpan: 0\n                                    acc.children.push flatCurElement\n                                if col > 0 \n                                    acc.descendants++\n                                col++\n                                if curIdx == lastIdx\n                                    node = acc\n                                    while node?\n                                        node.leaves++\n                                        if not node.firstLeaf \n                                            node.firstLeaf = acc[flatCurElement]\n                                        node = node.parent\n                                    return headers \n                                curElement = [] \n                                return acc[flatCurElement]\n                            else \n                                return acc\n                        headers)\n                    row++\n                    return headers\n                headers)\n            return headers\n\n        buildColAxisHeader = (axisHeaders, index, attrs, opts, disabledArrow) ->\n            ah =\n                text: attrs[index]\n                expandedCount: 0\n                expandables: 0\n                attrHeaders: []\n                clickStatus: clickStatusExpanded\n                onClick: collapseColAxis\n\n            isExpanded = true if not disabledArrow    \n            hClass = classExpanded\n            if index >= opts.collapseAt\n                isExpanded = false\n                hClass = classCollapsed\n                ah.clickStatus = clickStatusCollapsed\n                ah.onClick = expandAxis\n            \n            if not hideColAxisHeadersColumn    \n                ah.th = createColAxisHeaderTH ah.text, \"pvtAxisLabel #{hClass}\", ah.text, isExpanded \n                if not disabledArrow\n                    ah.th.arrowDiv.onclick = (event) ->\n                        event = event || window.event\n                        ah.onClick axisHeaders, index, attrs, opts\n            axisHeaders.ah.push ah\n            return ah \n\n        arrowColumnIsNeeded = () ->\n            return rowGroups.length > 1\n\n        buildRowAxisHeader = (axisHeaders, index, attrs, opts, disabledArrow) ->\n            ah =\n                text: \"\"\n                values: []\n                expandedCount: 0\n                expandables: 0\n                attrHeaders: []\n                clickStatus: clickStatusExpanded\n                onClick: collapseRowAxis\n                ths: []\n\n            isExpanded = true if not disabledArrow    \n            hClass = classExpanded\n            if index >= opts.collapseAt\n                isExpanded = false\n                hClass = classCollapsed\n                ah.clickStatus = clickStatusCollapsed\n                ah.onClick = expandAxis\n\n            for attr, i in rowGroups[index] \n                if i == 0 and arrowColumnIsNeeded()\n                    zoomClassPart = if isExpanded? then classZoom else \"\"\n                    arrowTh = createRowAxisHeaderTH attr, \"pvtAxisLabel #{hClass} #{zoomClassPart}\", \"\", true, isExpanded, {style: \"padding-left: #{rowArrowsPadding + index * rowArrowsLevelPadding}px;\"}\n                    ah.arrowTh = arrowTh\n                    ah.ths.push arrowTh \n                th = createRowAxisHeaderTH attr, \"pvtAxisLabel #{hClass}\", attr, false          \n                ah.ths.push th\n                ah.values.push attr\n\n            flatText = rowGroups[index].join String.fromCharCode(0)\n            ah.text = flatText \n            if not disabledArrow \n                ah.arrowTh.onclick = (event) ->\n                    event = event || window.event\n                    ah.onClick axisHeaders, index, attrs, opts\n\n            axisHeaders.ah.push ah\n            return ah \n\n        buildAxisHeaders = (thead, rowAttrs, colAttrs, opts) ->\n            colAxisHeaders =\n                collapseAttrHeader: collapseCol\n                expandAttrHeader: expandCol\n                ah: []\n\n            rowAxisHeaders =\n                collapseAttrHeader: collapseRow\n                expandAttrHeader: expandRow\n                ah: []\n\n            rowGroupsNumber = rowGroups.length\n            longestRowGroupLength = longestGroupLength rowGroups\n\n            rowsNumber = Math.max rowGroupsNumber, colAttrs.length \n\n            trs = []\n            for row in [0...rowsNumber]\n                tr = createElement \"tr\"\n                trs.push tr\n                thead.appendChild tr\n                if row + rowGroupsNumber >= rowsNumber\n                    curGroup = row - (rowsNumber - rowGroupsNumber)\n                    disabled = curGroup == rowGroupsNumber - 1\n                    ah = buildRowAxisHeader rowAxisHeaders, curGroup, rowAttrs, opts.rowSubtotalDisplay, disabled \n                    for th in ah.ths\n                        tr.appendChild th  \n                    ah.tr = tr\n                    groupLen = rowGroups[curGroup].length   \n                    if groupLen < longestRowGroupLength\n                        tr.appendChild createElement \"th\", \"pvtEmptyHeader\", {colspan: longestRowGroupLength - groupLen}\n                else if row == 0 and longestRowGroupLength > 0\n                    tr.appendChild createElement \"th\", \"pvtEmptyHeader\", {colspan: longestRowGroupLength + (if arrowColumnIsNeeded() then 1 else 0), rowspan: rowsNumber - rowGroupsNumber}\n\n                if row + colAttrs.length >= rowsNumber\n                    curCol = row - (rowsNumber - colAttrs.length)\n                    disabled = not colSubtotalIsEnabled opts.colSubtotalDisplay, curCol\n                    ah = buildColAxisHeader colAxisHeaders, curCol, colAttrs, opts.colSubtotalDisplay, disabled\n                    tr.appendChild ah.th if not hideColAxisHeadersColumn\n                    ah.tr = tr\n                else if row == 0 and colAttrs.length > 0 and not hideColAxisHeadersColumn\n                    tr.appendChild createElement \"th\", \"pvtEmptyHeader\", {rowspan: rowsNumber - colAttrs.length}\n\n            return [colAxisHeaders, rowAxisHeaders, trs]\n\n        longestGroupLength = (splitGroups) ->\n            len = 0\n            for group in splitGroups\n                len = Math.max len, group.length \n            return len\n\n        colSubtotalIsEnabled = (subtotalOpts, index) ->\n            splitPositions = subtotalOpts.splitPositions\n            if index == splitPositions[splitPositions.length - 1] or subtotalOpts.disableExpandCollapse or subtotalOpts.disableSubtotal\n                return false\n            return splitPositions.indexOf(index) != -1    \n\n        buildColHeader = (axisHeaders, attrHeaders, h, rowAttrs, colAttrs, node, opts, colsData) ->\n            # DF Recurse\n            buildColHeader axisHeaders, attrHeaders, h[chKey], rowAttrs, colAttrs, node, opts, colsData for chKey in h.children\n            # Process\n            ah = axisHeaders.ah[h.col]\n            ah.attrHeaders.push h\n\n            h.node = node.counter\n            h.onClick = collapseCol\n\n            isExpanded = true if colSubtotalIsEnabled(opts.colSubtotalDisplay, h.col) and h.children.length isnt 0\n            h.th = createColAttrHeaderTH h.key, false, \"pvtColLabel #{classColShow} col#{h.row} colcol#{h.col} #{classColExpanded}\", h.value, isExpanded, colsData,\n                \"data-colnode\": h.node    \n                \"colspan\": h.childrenSpan if h.children.length isnt 0\n                \n\n            if h.children.length isnt 0 and colSubtotalIsEnabled opts.colSubtotalDisplay, h.col\n                ah.expandables++\n                ah.expandedCount += 1\n                h.th.colSpan++ if not opts.colSubtotalDisplay.hideOnExpand\n                if not opts.colSubtotalDisplay.disableExpandCollapse\n                    h.th.arrowDiv.onclick = (event) ->\n                        event = event || window.event\n                        h.onClick axisHeaders, h, opts.colSubtotalDisplay \n                h.sTh = createColAttrHeaderTH h.key, true, \"pvtColLabelFiller #{classColShow} col#{h.row} colcol#{h.col} #{classColExpanded}\", \"\", undefined, colsData, \n                    \"data-colnode\": h.node\n                    \"rowspan\":  colAttrs.length - h.col - 1\n                replaceClass h.sTh, classColShow, classColHide if opts.colSubtotalDisplay.hideOnExpand\n                h[h.children[0]].tr.appendChild h.sTh\n\n            h.parent?.childrenSpan += h.th.colSpan\n\n            h.clickStatus = clickStatusExpanded\n            ah.tr.appendChild h.th\n            h.tr = ah.tr\n            attrHeaders.push h\n            node.counter++ \n\n\n        buildRowTotalsHeader = (tr, span, colsWidth) ->\n            th = createColAttrHeaderTH [], true, \"pvtTotalLabel rowTotal\", \"\", undefined, colsWidth,  \n                rowspan: span\n            tr.appendChild th\n\n        buildRowHeader = (tbody, axisHeaders, attrHeaders, h, rowAttrs, colAttrs, node, isLastChildList, opts) ->\n            for i in [0...h.children.length]\n                chKey = h.children[i]\n                isLastChildList.push i == h.children.length - 1\n                buildRowHeader tbody, axisHeaders, attrHeaders, h[chKey], rowAttrs, colAttrs, node, isLastChildList, opts\n                isLastChildList.pop()\n            h.isLastChildList = isLastChildList[..]\n            ah = axisHeaders.ah[h.col]\n            ah.attrHeaders.push h\n\n            h.node = node.counter\n            h.onClick = collapseRow\n            firstChild = h[h.children[0]] if h.children.length isnt 0\n\n            colSpan = 1 + longestGroupLength(rowGroups) - h.values.length\n            colSpan += 1 if colAttrs.length > 0 and not hideColAxisHeadersColumn\n            h.tr = createElement \"tr\", \"row#{h.row}\"\n            if h.children.length is 0\n                tbody.appendChild h.tr\n            else\n                tbody.insertBefore h.tr, firstChild.tr\n\n            h.ths = []\n\n            if h.children.length isnt 0\n                isExpanded = true\n                arrowOpts = {style: \"padding-left: #{rowArrowsPadding + h.col * rowArrowsLevelPadding}px;\"}\n            else\n                arrowOpts = {}\n            \n            zoomClassPart = if isExpanded? then classZoom else \"\"\n            arrowClass = \"pvtRowLabel #{classRowShow} row#{h.row} rowcol#{h.col} #{classRowExpanded} #{zoomClassPart}\"\n            h.arrowTh = createRowAttrHeaderTH h.key, undefined, arrowClass, \"\", true, isExpanded, h.isLastChildList, arrowOpts\n            if arrowColumnIsNeeded()\n                h.ths.push h.arrowTh\n                h.tr.appendChild h.arrowTh\n            \n            for i in [0...h.values.length]\n                thClass = \"pvtRowLabel #{classRowShow} row#{h.row} rowcol#{h.col} #{classRowExpanded}\"\n                th = createRowAttrHeaderTH h.key, rowGroups[h.col][i], thClass, h.values[i], false, undefined, h.isLastChildList, \n                    \"data-rownode\": h.node\n                th.colSpan = colSpan if i+1 == h.values.length\n                \n                h.ths.push th\n                h.tr.appendChild th\n\n            if h.children.length isnt 0 \n                ++ah.expandedCount\n                ++ah.expandables\n                if not opts.rowSubtotalDisplay.disableExpandCollapse and arrowColumnIsNeeded()\n                    h.arrowTh.onclick = (event) ->\n                        event = event || window.event\n                        h.onClick axisHeaders, h, opts.rowSubtotalDisplay\n\n                if not opts.rowSubtotalDisplay.displayOnTop\n                    h.sTr = createElement \"tr\", \"row#{h.row}\"\n                    tbody.appendChild h.sTr\n\n            h.parent?.childrenSpan += 1\n\n            h.clickStatus = clickStatusExpanded\n            attrHeaders.push h\n            node.counter++\n\n        getTableEventHandlers = (value, rowKey, colKey, rowAttrs, colAttrs, opts) ->\n            return if not opts.table?.eventHandlers\n            eventHandlers = {}\n            for own event, handler of opts.table.eventHandlers\n                filters = {}\n                filters[attr] = colKey[i] for own i, attr of colAttrs when colKey[i]?\n                filters[attr] = rowKey[i] for own i, attr of rowAttrs when rowKey[i]?\n                eventHandlers[event] = (e) -> handler(e, value, filters, pivotData)\n            return eventHandlers\n\n        buildValues = (tbody, colAttrHeaders, rowAttrHeaders, rowAttrs, colAttrs, opts) ->\n            for rh in rowAttrHeaders\n                rCls = \"pvtVal row#{rh.row} rowcol#{rh.col} #{classRowExpanded}\"\n                if rh.children.length > 0\n                    rCls += \" pvtRowSubtotal\"\n                    rCls += if opts.rowSubtotalDisplay.hideOnExpand then \" #{classRowHide}\" else \"  #{classRowShow}\"\n                else\n                    rCls += \" #{classRowShow}\"\n                tr = if rh.sTr then rh.sTr else rh.tr\n                for ch in colAttrHeaders when ch.col is colAttrs.length-1 or (ch.children.length isnt 0 and colSubtotalIsEnabled opts.colSubtotalDisplay, ch.col)\n                    aggregator = tree[rh.flatKey][ch.flatKey] ? { value: (-> null), format: -> \"\" }\n                    val = aggregator.value()\n                    cls = \" #{rCls} col#{ch.row} colcol#{ch.col} #{classColExpanded}\"\n                    if ch.children.length > 0\n                        cls += \" pvtColSubtotal\"\n                        cls += if opts.colSubtotalDisplay.hideOnExpand then \" #{classColHide}\" else \" #{classColShow}\"\n                    else\n                        cls += \" #{classColShow}\"\n                    td = createValueTD val, rh.key, ch.key, aggregator, cls, \n                        \"data-value\": val\n                        \"data-rownode\": rh.node\n                        \"data-colnode\": ch.node,\n                        getTableEventHandlers val, rh.key, ch.key, rowAttrs, colAttrs, opts\n\n                    tr.appendChild td\n\n        \n                if not hideRowsTotalsCol            \n                    # buildRowTotal\n                    totalAggregator = rowTotals[rh.flatKey]\n                    val = totalAggregator.value()\n                    td = createValueTD val, rh.key, [], totalAggregator, \"pvtTotal rowTotal #{rCls}\",\n                        \"data-value\": val\n                        \"data-row\": \"row#{rh.row}\"\n                        \"data-rowcol\": \"col#{rh.col}\"\n                        \"data-rownode\": rh.node,\n                        getTableEventHandlers val, rh.key, [], rowAttrs, colAttrs, opts\n                    tr.appendChild td\n\n        buildColTotalsHeader = (rowHeadersColumns, colAttrs) ->\n            tr = createElement \"tr\"\n            colspan = rowHeadersColumns + (if colAttrs.length == 0 or hideColAxisHeadersColumn then 0 else 1) \n            if colspan > 0\n                if arrowColumnIsNeeded()\n                    arrowTh = createRowAttrHeaderTH [], undefined, \"pvtTotalLabel colTotal\", \"\", true, undefined, []\n                    tr.appendChild arrowTh\n                th = createRowAttrHeaderTH [], undefined, \"pvtTotalLabel colTotal\", \"\", false, undefined, [], {colspan: colspan}\n                tr.appendChild th\n            return tr\n\n        buildColTotals = (tr, attrHeaders, rowAttrs, colAttrs, opts) ->\n            for h in attrHeaders when  h.col is colAttrs.length-1 or (h.children.length isnt 0 and colSubtotalIsEnabled opts.colSubtotalDisplay, h.col)\n                clsNames = \"pvtVal pvtTotal colTotal #{classColExpanded} col#{h.row} colcol#{h.col}\"\n                if h.children.length isnt 0\n                    clsNames += \" pvtColSubtotal\" \n                    clsNames += if opts.colSubtotalDisplay.hideOnExpand then \" #{classColHide}\" else \" #{classColShow}\"\n                else\n                    clsNames += \" #{classColShow}\"\n                totalAggregator = colTotals[h.flatKey]\n                val = totalAggregator.value()\n                td = createValueTD val, [], h.key, totalAggregator, clsNames, \n                    \"data-value\": val\n                    \"data-for\": \"col#{h.col}\"\n                    \"data-colnode\": \"#{h.node}\",\n                    getTableEventHandlers val, [], h.key, rowAttrs, colAttrs, opts\n                tr.appendChild td\n\n        buildGrandTotal = (tbody, tr, rowAttrs, colAttrs, opts) ->\n            totalAggregator = allTotal\n            val = totalAggregator.value()\n            td = createValueTD val, [], [], totalAggregator, \"pvtGrandTotal\", \n                {\"data-value\": val},\n                getTableEventHandlers val, [], [], rowAttrs, colAttrs, opts\n            tr.appendChild td\n\n        collapseColAxisHeaders = (axisHeaders, col, opts) ->\n            for i in [col..axisHeaders.ah.length-2]\n                if colSubtotalIsEnabled opts, i\n                    ah = axisHeaders.ah[i]\n                    replaceClass ah.th, classExpanded, classCollapsed\n                    renderColAxisHeader ah.th, ah.text, ah.text, false, true\n                    ah.clickStatus = clickStatusCollapsed\n                    ah.onClick = expandAxis\n\n        collapseRowAxisHeaders = (axisHeaders, row, opts) ->\n            for i in [row..axisHeaders.ah.length-2]\n                ah = axisHeaders.ah[i]\n                for th in ah.ths\n                    replaceClass th, classExpanded, classCollapsed\n                renderRowAxisHeader ah.arrowTh, \"\", ah.values[0], true, false      \n                ah.clickStatus = clickStatusCollapsed\n                ah.onClick = expandAxis\n\n        adjustColAxisHeader = (axisHeaders, col, opts) ->\n            if not hideColAxisHeadersColumn\n                ah = axisHeaders.ah[col]\n                if ah.expandedCount is 0\n                    collapseColAxisHeaders axisHeaders, col, opts\n                else if ah.expandedCount is ah.expandables\n                    replaceClass ah.th, classCollapsed, classExpanded\n                    renderColAxisHeader ah.th, ah.text, ah.text, true, true\n                    ah.clickStatus = clickStatusExpanded\n                    ah.onClick = collapseColAxis\n\n        adjustRowAxisHeader = (axisHeaders, row, opts) ->\n            ah = axisHeaders.ah[row]\n            if ah.expandedCount is 0\n                collapseRowAxisHeaders axisHeaders, row, opts\n            else if ah.expandedCount is ah.expandables\n                for th in ah.ths\n                    replaceClass th, classCollapsed, classExpanded\n                renderRowAxisHeader ah.arrowTh, \"\", ah.values[0], true, true\n                ah.clickStatus = clickStatusExpanded\n                ah.onClick = collapseRowAxis\n\n        hideChildCol = (ch) ->\n            outerDiv = $(ch.th).closest 'div.subtotalouterdiv'\n            outerDiv\n                .find \"tbody tr td[data-colnode=\\\"#{ch.node}\\\"], th[data-colnode=\\\"#{ch.node}\\\"]\" \n                .removeClass classColShow \n                .addClass classColHide\n\n            col = outerDiv.find \"colgroup col[data-colnode=\\\"#{ch.node}\\\"]\"\n            col?.removeClass classColShow\n            col?.addClass classColHide\n            \n        collapseHiddenColSubtotal = (h, opts) ->\n            $(h.th).closest 'div.subtotalouterdiv'\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\" \n                .removeClass classColExpanded\n                .addClass classColCollapsed\n            if h.children.length isnt 0\n                renderColAttrHeader h.th, h.value, h.key, false, false, true\n            h.th.colSpan = 1\n            \n        collapseShowColSubtotal = (h, opts) ->\n            outerDiv = $(h.th).closest 'div.subtotalouterdiv'\n            outerDiv\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\" \n                .removeClass classColExpanded\n                .addClass classColCollapsed\n                .removeClass classColHide\n                .addClass classColShow\n\n            col = outerDiv.find \"colgroup col[data-colnode=\\\"#{h.node}\\\"]\"\n            col?.removeClass classColHide\n            col?.addClass classColShow\n                        \n            if h.children.length isnt 0\n                renderColAttrHeader h.th, h.value, h.key, false, false, true\n            h.th.colSpan = 1\n\n        collapseChildCol = (ch, h) ->\n            collapseChildCol ch[chKey], h for chKey in ch.children when hasClass ch[chKey].th, classColShow\n            hideChildCol ch\n\n        collapseCol = (axisHeaders, h, opts) ->\n            colSpan = h.th.colSpan - 1\n            collapseChildCol h[chKey], h for chKey in h.children when hasClass h[chKey].th, classColShow\n            if colSubtotalIsEnabled opts, h.col\n                if hasClass h.th, classColHide\n                    collapseHiddenColSubtotal h, opts\n                else \n                    collapseShowColSubtotal h, opts\n            if not hasClass h.th, classColHide        \n                p = h.parent\n                while p\n                    p.th.colSpan -= colSpan\n                    p = p.parent\n                emptyTopAttrTH?.colSpan -= colSpan    \n            h.clickStatus = clickStatusCollapsed\n            h.onClick = expandCol\n            axisHeaders.ah[h.col].expandedCount--\n            adjustColAxisHeader axisHeaders, h.col, opts\n\n        showChildCol = (ch) ->\n            outerDiv = $(ch.th).closest 'div.subtotalouterdiv'\n            outerDiv\n                .find \"tbody tr td[data-colnode=\\\"#{ch.node}\\\"], th[data-colnode=\\\"#{ch.node}\\\"]\"\n                .removeClass classColHide\n                .addClass classColShow\n\n            col = outerDiv.find \"colgroup col[data-colnode=\\\"#{ch.node}\\\"]\"\n            col?.removeClass classColHide\n            col?.addClass classColShow\n\n        expandHideColSubtotal = (h) ->\n            outerDiv = $(h.th).closest 'div.subtotalouterdiv'\n            outerDiv\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\" \n                .removeClass \"#{classColCollapsed} #{classColShow}\" \n                .addClass \"#{classColExpanded} #{classColHide}\"\n\n            col = outerDiv.find \"colgroup col[data-colnode=\\\"#{h.node}\\\"]\"\n            col?.removeClass classColShow\n            col?.addClass classColHide\n            \n            replaceClass h.th, classColHide, classColShow\n            renderColAttrHeader h.th, h.value, h.key, false, true, true\n\n        expandShowColSubtotal = (h) ->\n            outerDiv = $(h.th).closest 'div.subtotalouterdiv'\n            outerDiv\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\" \n                .removeClass \"#{classColCollapsed} #{classColHide}\"\n                .addClass \"#{classColExpanded} #{classColShow}\"\n\n            col = outerDiv.find \"colgroup col[data-colnode=\\\"#{h.node}\\\"]\"\n            col?.removeClass classColHide\n            col?.addClass classColShow\n            \n            h.th.colSpan++\n            renderColAttrHeader h.th, h.value, h.key, false, true, true\n\n        expandChildCol = (ch, opts) ->\n            if ch.children.length isnt 0 and opts.hideOnExpand and ch.clickStatus is clickStatusExpanded\n                replaceClass ch.th, classColHide, classColShow\n            else\n                showChildCol ch\n            if ch.sTh and ch.clickStatus is clickStatusExpanded and opts.hideOnExpand\n                replaceClass ch.sTh, classColShow, classColHide\n            expandChildCol ch[chKey], opts for chKey in ch.children if (ch.clickStatus is clickStatusExpanded or not colSubtotalIsEnabled opts, ch.col)\n            \n        expandCol = (axisHeaders, h, opts) ->\n            if h.clickStatus is clickStatusExpanded\n                adjustColAxisHeader axisHeaders, h.col, opts\n                return\n            colSpan = 0\n            for chKey in h.children\n                ch = h[chKey]\n                expandChildCol ch, opts\n                colSpan += ch.th.colSpan\n            h.th.colSpan = colSpan\n\n            if colSubtotalIsEnabled opts, h.col\n                if opts.hideOnExpand\n                    expandHideColSubtotal h\n                    --colSpan\n                else\n                    expandShowColSubtotal h\n            p = h.parent\n            while p\n                p.th.colSpan += colSpan\n                p = p.parent\n            emptyTopAttrTH?.colSpan += colSpan\n\n            h.clickStatus = clickStatusExpanded\n            h.onClick = collapseCol\n            axisHeaders.ah[h.col].expandedCount++\n            adjustColAxisHeader axisHeaders, h.col, opts\n\n        hideChildRow = (ch, opts) ->\n            replaceClass cell, classRowShow, classRowHide for cell in ch.tr.querySelectorAll \"th, td\"\n            replaceClass cell, classRowShow, classRowHide for cell in ch.sTr.querySelectorAll \"th, td\" if ch.sTr\n\n        collapseShowRowSubtotal = (h, opts) ->\n            renderRowAttrHeader h.arrowTh, \"\", h.key, undefined, true, false, h.isLastChildList\n            for cell in h.tr.querySelectorAll \"th, td\"\n                removeClass cell, \"#{classRowExpanded}\"\n                addClass cell, \"#{classRowCollapsed}\"\n            if h.sTr\n                for cell in h.sTr.querySelectorAll \"th, td\"\n                    removeClass cell, \"#{classRowExpanded}\"\n                    addClass cell, \"#{classRowCollapsed}\"\n\n        collapseChildRow = (ch, h, opts) ->\n            collapseChildRow ch[chKey], h, opts for chKey in ch.children\n            hideChildRow ch, opts\n\n        collapseRow = (axisHeaders, h, opts) ->\n            collapseChildRow h[chKey], h, opts for chKey in h.children\n            collapseShowRowSubtotal h, opts\n            h.clickStatus = clickStatusCollapsed\n            h.onClick = expandRow\n            axisHeaders.ah[h.col].expandedCount--\n            adjustRowAxisHeader axisHeaders, h.col, opts\n            callbacks.checkPadding()\n\n        showChildRow = (ch, opts) ->\n            replaceClass cell, classRowHide, classRowShow for cell in ch.tr.querySelectorAll \"th, td\"\n            replaceClass cell, classRowHide, classRowShow for cell in ch.sTr.querySelectorAll \"th, td\" if ch.sTr\n\n        expandShowRowSubtotal = (h, opts) ->\n            renderRowAttrHeader h.arrowTh, \"\", h.key, undefined, true, true, h.isLastChildList\n            for cell in h.tr.querySelectorAll \"th, td\"\n                removeClass cell, \"#{classRowCollapsed} #{classRowHide}\"\n                addClass cell, \"#{classRowExpanded} #{classRowShow}\"\n            if h.sTr\n                for cell in h.sTr.querySelectorAll \"th, td\"\n                    removeClass cell, \"#{classRowCollapsed} #{classRowHide}\"\n                    addClass cell, \"#{classRowExpanded} #{classRowShow}\"\n\n        expandHideRowSubtotal = (h, opts) ->\n            renderRowAttrHeader h.arrowTh, \"\", h.key, undefined, true, true, h.isLastChildList\n            for cell in h.tr.querySelectorAll \"th, td\"\n                removeClass cell, \"#{classRowCollapsed} #{classRowShow}\"\n                addClass cell, \"#{classRowExpanded} #{classRowHide}\"\n            for th in h.ths    \n                removeClass th, \"#{classRowCollapsed} #{classRowHide}\"\n            addClass cell, \"#{classRowExpanded} #{classRowShow}\"\n            if h.sTr\n                for cell in h.sTr.querySelectorAll \"th, td\"\n                    removeClass cell, \"#{classRowCollapsed} #{classRowShow}\"\n                    addClass cell, \"#{classRowExpanded} #{classRowHide}\"\n\n        expandChildRow = (ch, opts) ->\n            if ch.children.length isnt 0 and opts.hideOnExpand and ch.clickStatus is clickStatusExpanded\n                for th in ch.ths\n                    replaceClass th, classRowHide, classRowShow\n            else\n                showChildRow ch, opts\n            if ch.sTh and ch.clickStatus is clickStatusExpanded and opts.hideOnExpand\n                replaceClass ch.sTh, classRowShow, classRowHide\n            expandChildRow ch[chKey], opts for chKey in ch.children if (ch.clickStatus is clickStatusExpanded)\n\n        expandRow = (axisHeaders, h, opts) ->\n            if h.clickStatus is clickStatusExpanded\n                adjustRowAxisHeader axisHeaders, h.col, opts\n                return\n            for chKey in h.children\n                ch = h[chKey]\n                expandChildRow ch, opts\n            if h.children.length isnt 0 \n                if opts.hideOnExpand\n                    expandHideRowSubtotal h, opts\n                else\n                    expandShowRowSubtotal h, opts\n            h.clickStatus = clickStatusExpanded\n            h.onClick = collapseRow\n            axisHeaders.ah[h.col].expandedCount++\n            adjustRowAxisHeader axisHeaders, h.col, opts\n            callbacks.checkPadding()\n    \n        collapseColAxis = (axisHeaders, col, attrs, opts) ->\n            for i in [attrs.length-2..col] by -1\n                if colSubtotalIsEnabled opts, i\n                    for h in axisHeaders.ah[i].attrHeaders when h.clickStatus is clickStatusExpanded and h.children.length isnt 0\n                        axisHeaders.collapseAttrHeader axisHeaders, h, opts\n\n        collapseRowAxis = (axisHeaders, row, attrs, opts) ->\n            for i in [axisHeaders.ah.length-2..row] by -1\n                for h in axisHeaders.ah[i].attrHeaders when h.clickStatus is clickStatusExpanded and h.children.length isnt 0\n                    axisHeaders.collapseAttrHeader axisHeaders, h, opts \n\n        expandAxis = (axisHeaders, col, attrs, opts) ->\n            ah = axisHeaders.ah[col]\n            axisHeaders.expandAttrHeader axisHeaders, h, opts for h in axisHeaders.ah[i].attrHeaders for i in [0..col] \n            # when h.clickStatus is clickStatusCollapsed and h.children.length isnt 0 for i in [0..col] \n\n        createColGroup = (columnData) ->\n            colgroup = createElement \"colgroup\"\n            for cdata in columnData\n                column = createElement \"col\", null, { style :  \"width: #{cdata.width}px\", \"data-colnode\" : cdata.colnode }\n                colgroup.appendChild column\n            return colgroup\n        \n        getColumnWidth = (isAttrColumn, colKeyValues, axisValues, isArrow) ->\n            if callbacks?\n                return callbacks.getColumnWidth isAttrColumn, colKeyValues, axisValues, isArrow, rowGroups.length - 1\n            else\n                return if isArrow then 15 + 10 * (rowGroups.length - 1) else 50\n            \n        rowHeaderColsData = (trs, rowAttrsCnt) ->\n            if trs.length > 0\n                colCnt = findAxisHeadersColCount trs[0]\n                columns = ([] for i in [0...colCnt])\n                colsData = ({ width: 0 } for i in [0...colCnt])\n                \n                first = 0\n                if arrowColumnIsNeeded() \n                    colsData[0].width = getColumnWidth false, null, null, true\n                    first = 1\n\n                lastShift = 0                    \n                if colAttrs.length > 0 and not hideColAxisHeadersColumn\n                    colsData[colCnt-1].width = getColumnWidth false, null, [], false\n                    lastShift = 1\n                    \n                for rowIndex in [(trs.length-rowAttrsCnt)...trs.length]\n                    tr = trs[rowIndex]\n                    curColumn = first\n                    for i in [first...(tr.cells.length - lastShift)]\n                        th = tr.cells[i]\n                        columns[curColumn].push th.textContent if th.textContent\n                        curColumn += th.colSpan\n                \n                for i in [first...(colCnt - lastShift)] \n                    colsData[i].width = getColumnWidth false, null, columns[i], false  \n                return colsData\n            else    \n                return [getColumnWidth(true, [], null, false)]\n            \n        findAxisHeadersColCount = (tr) ->\n            colCnt = 0\n            for i in [0...tr.cells.length]\n                th = tr.cells[i]\n                colCnt += th.colSpan\n            return colCnt\n            \n        main = (rowAttrs, rowKeys, colAttrs, colKeys) ->\n            rowAttrHeaders = []\n            colAttrHeaders = []\n\n            colKeyHeaders = processColKeys colKeys if colAttrs.length isnt 0 and colKeys.length isnt 0\n            rowKeyHeaders = processRowKeys rowKeys, \"pvtRowLabel\", rowSplitPositions if rowAttrs.length isnt 0 and rowKeys.length isnt 0\n\n            outerDiv = createElement \"div\", \"subtotalouterdiv\"\n\n            headerDiv = createElement \"div\", \"headerdiv\" \n            headerTable = createElement \"table\", \"headertable pvtTable table\"\n\n            thead = createElement \"thead\"\n\n            outerDiv.appendChild headerDiv\n            headerDiv.appendChild headerTable\n            headerTable.appendChild thead\n\n            [colAxisHeaders, rowAxisHeaders, trs] = buildAxisHeaders thead, rowAttrs, colAttrs, opts\n            colsData = rowHeaderColsData trs, rowAxisHeaders.ah.length\n\n            if colAttrs.length isnt 0 \n                overallSpan = 0\n                if colKeyHeaders?\n                    node = counter: 0\n                    for chKey in colKeyHeaders.children\n                        buildColHeader colAxisHeaders, colAttrHeaders, colKeyHeaders[chKey], rowAttrs, colAttrs, node, opts, colsData \n                        overallSpan += colKeyHeaders[chKey].th.colSpan\n\n                if not hideRowsTotalsCol        \n                    buildRowTotalsHeader colAxisHeaders.ah[0].tr, colAttrs.length, colsData\n                rowAttrHeadersCount = rowGroups.length\n                if rowAttrHeadersCount > colAttrs.length\n                    colspan = overallSpan + (if hideRowsTotalsCol then 0 else 1)\n                    emptyTopAttrTH = createElement \"th\", \"pvtEmptyHeader\", {colspan: colspan, rowspan: rowAttrHeadersCount - colAttrs.length}\n                    rowAxisHeaders.ah[0].tr.appendChild emptyTopAttrTH\n\n            bodyDiv = createElement \"div\", \"bodydiv\"\n            scrollDiv = createElement \"div\", \"scrolldiv\"\n            scrollDiv.onscroll = () ->\n                sLeft = scrollDiv.scrollLeft\n                headerDiv.scrollLeft = sLeft\n            bodyTable = createElement \"table\", \"bodytable pvtTable table\"\n            tbody = createElement \"tbody\"\n\n            outerDiv.appendChild bodyDiv\n            bodyDiv.appendChild scrollDiv\n            scrollDiv.appendChild bodyTable\n            bodyTable.appendChild tbody\n            \n            if rowAttrs.length isnt 0\n                if not hideRowsTotalsCol\n                    buildRowTotalsHeader rowAxisHeaders.ah[0].tr, rowGroups.length, colsData if colAttrs.length is 0\n                if rowKeyHeaders?\n                    node = counter: 0\n                    childrenCnt = rowKeyHeaders.children.length\n                    for i in [0...childrenCnt]\n                        chKey = rowKeyHeaders.children[i]\n                        buildRowHeader tbody, rowAxisHeaders, rowAttrHeaders, rowKeyHeaders[chKey], rowAttrs, colAttrs, node, [i == childrenCnt - 1], opts \n\n            buildValues tbody, colAttrHeaders, rowAttrHeaders, rowAttrs, colAttrs, opts\n            if not hideColsTotalRow\n                tr = buildColTotalsHeader longestGroupLength(rowGroups), colAttrs\n                buildColTotals tr, colAttrHeaders, rowAttrs, colAttrs, opts if colAttrs.length > 0\n                if not hideRowsTotalsCol\n                    buildGrandTotal tbody, tr, rowAttrs, colAttrs, opts\n                tbody.appendChild tr\n\n\n            collapseColAxis colAxisHeaders, opts.colSubtotalDisplay.collapseAt, colAttrs, opts.colSubtotalDisplay\n            collapseRowAxis rowAxisHeaders, opts.rowSubtotalDisplay.collapseAt, rowAttrs, opts.rowSubtotalDisplay\n\n            headerTable.style.display = \"\"\n            \n            bodyTable.style.display = \"\"\n\n            headerTable.insertBefore createColGroup(colsData), headerTable.firstChild\n            bodyTable.insertBefore createColGroup(colsData), bodyTable.firstChild\n\n            outerDiv.setAttribute \"data-numrows\", rowKeys.length\n            outerDiv.setAttribute \"data-numcols\", colKeys.length\n            \n            return outerDiv\n\n        return main rowAttrs, rowKeys, colAttrs, colKeys\n\n    $.pivotUtilities.subtotal_renderers =\n        \"TABLE\"             : (pvtData, opts) -> SubtotalRenderer pvtData, opts\n        \"TABLE_BARCHART\"    : (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).barchart()\n        \"TABLE_HEATMAP\"     : (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"heatmap\", opts\n        \"TABLE_ROW_HEATMAP\" : (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"rowheatmap\", opts\n        \"TABLE_COL_HEATMAP\" : (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"colheatmap\", opts\n            \n    # \n    # Aggregators\n    #\n    usFmtPct = $.pivotUtilities.numberFormat digitsAfterDecimal:1, scaler: 100, suffix: \"%\"\n    aggregatorTemplates = $.pivotUtilities.aggregatorTemplates;\n\n    subtotalAggregatorTemplates =\n        fractionOf: (wrapped, type=\"row\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            rowKey = [] if typeof rowKey is \"undefined\"\n            colKey = [] if typeof colKey is \"undefined\"\n            selector: {row: [rowKey.slice(0, -1),[]], col: [[], colKey.slice(0, -1)]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    $.pivotUtilities.subtotalAggregatorTemplates = subtotalAggregatorTemplates\n\n    $.pivotUtilities.subtotal_aggregators = do (tpl = aggregatorTemplates, sTpl = subtotalAggregatorTemplates) ->\n        \"Sum As Fraction Of Parent Row\":        sTpl.fractionOf(tpl.sum(), \"row\", usFmtPct)\n        \"Sum As Fraction Of Parent Column\":     sTpl.fractionOf(tpl.sum(), \"col\", usFmtPct)\n        \"Count As Fraction Of Parent Row\":      sTpl.fractionOf(tpl.count(), \"row\", usFmtPct)\n        \"Count As Fraction Of Parent Column\":   sTpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n\n"
  ]
}