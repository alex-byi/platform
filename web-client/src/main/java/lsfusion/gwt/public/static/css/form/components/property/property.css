
.prop {
    box-sizing: content-box; /* it's important to have content-box sizing, since we're setting explicit heights for the renderer element (and we don't want paddings to be included, since we're calculating elements heights based on contents) */
}

.prop, .prop.comp-shrink-horz {
    overflow-x: hidden;
}

.prop, .prop.comp-shrink-vert {
    overflow-y: hidden;
}

.prop-input {
    background-color:transparent;
    /*var(--component-background-color);*/
    color: var(--text-color);
}

/* ------------ Colored corner triangles  ------------ */

.notNullCornerTriangleHolder, .changeActionCornerTriangleHolder {
    position: relative;
}
.notNullCornerTriangleHolder::after, .changeActionCornerTriangleHolder::after {
    content: "";
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 0 0 5px 5px;
    position: absolute;
    right: 0;
    bottom: 0;
}

.notNullCornerTriangleHolder::after {
    border-color: transparent transparent var(--not-null-corner-triangle-color) transparent;
}

.changeActionCornerTriangleHolder::after {
    border-color: transparent transparent var(--focus-color) transparent;
}

.emptyValueString {
    color: var(--null-value-string-color);
}

.nullValueString.requiredValueString {
    /*color: var(--required-value-string-color);*/
    position: relative;
}
.nullValueString.requiredValueString::before { /* using ::before to do not conflict with triangles  */
    content: "";
    background: var(--not-null-line-color);
    height: 1px;
    bottom: 2px;
    right:0;
    left:0;
    margin: 0 0.3125rem;
    position:absolute;
}

.text-based-prop, .text-based-prop.dataGridCell {
    padding: 2px 3px;
}