.table {
    /* here it's tricky, there are two ways to make border single :
    1) border-spacing: 0, border-collapse: separate (default)
    2) border-collapse: collapse
    however in second case, somewhy padding is not working, so margin should be used which is not convenient, since margin is used for other purposes
    */
    border-spacing: 0;
    border-collapse: separate !important;

    table-layout: fixed; /* we want predictable (not dependant from the content) manual column sizes  */
    width: 100%; /* it's odd but without this table-layout is switched to auto */
    height: fit-content; /* it's even more odd - without this height : 100% in tds won't work */
}

.table > :not(:first-child) {
    border: none !important;
}

.cell-div {
    /* it's tricky here, this cell-div used for property rendering and in particular property "sizing"
     "sizing" needs box-sizing to be content-box to ignore paddings, but it's no good for width 100%, so we have to
     set it to fill-available to have 100% with the respect of paddings (for this class explicit width is not set, for now, while colgroup widths are used)*/
    width: 100%;
    width: -webkit-fill-available;
    width: -moz-available;
    min-height: 100%; /* we want to stretch div in the cell even if the explicit height is set */
}

/* ----- GGridPropertyTable ----- */
.dataGridWidget {
    /*border: 1px solid var(--component-border-color);*/
    /*border-radius: var(--table-border-radius);*/

    /*background: var(--component-background-color);*/
    cursor: default;
    overflow: hidden; /* important for "removing outer grid borders", since they are removed with margin -1 overflow should be hidden */
}

.dataGridHeader {
}

.dataGridHeaderCell {
    /* the same as dataGridCell, dataGridHeaderCell, table.pvtTable thead tr th/td */
    /* there are two ways to draw a grid:
    1) use border-collapse : collapse + first / last cells border : none, but there gonna be problems with focus cell + padding won't work (it can be fixed but it's harder to implement)
    2) draw left and bottom + right for last cells
    for now will use 2nd option
    */
    border-bottom: 1px solid var(--grid-separator-border-color) !important;
    border-right: 1px solid var(--grid-separator-border-color);
    background: var(--background-color) !important;
    
    position: sticky !important;
    top: 0;
    z-index: 1;
    padding: 0 0.125rem;
    font-weight: normal;
}

/* it's hard to tell why, but setting overflow:hidden, prevents getting divs bigger than their parents */

.wrap-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

.wrap-img-margins {
    /*overflow: hidden;*/
    margin: 0.0625rem 0.125rem;
}

.dataGridHeaderCell-caption {
    white-space: normal;
}

.dataGridHeaderCell-sortimg {
    /*overflow: hidden;*/
}

.dataGridFirstHeaderCell {
    /*border-left : none;*/
}

.dataGridLastHeaderCell {
    /*border-right: none;*/
    /* the same as dataGridLastCell, dataGridLastHeaderCell, table.pvtTable thead tr th:last-of-type */
    border-right: 1px solid var(--grid-separator-border-color);
}

.dataGridFooter {
}
.dataGridFooterCell {
    background: var(--background-color) !important;
    border-top: 1px solid var(--grid-separator-border-color) !important;
    border-right: 1px solid var(--grid-separator-border-color);
    border-bottom: none !important;
    
    /* cells for non-text renderers change position to relative in GwtClientUtils.setupFillParentElement() */
    position: sticky !important;
    bottom: 0;
    z-index: 1;

    padding: 0 0.125rem;
    font-weight: normal;
    overflow: hidden;
}
.dataGridFirstFooterCell {
    /*border-left : none;*/
}
.dataGridLastFooterCell {
    /*border-right : none;*/
}

.dataGridRow {
}

.dataGridCell {
    /* the same as dataGridCell, dataGridHeaderCell, table.pvtTable thead tr th/td */
    border-bottom: var(--border-width) solid var(--grid-separator-border-color);
    border-right: var(--border-width) solid var(--grid-separator-border-color);

    padding: 0;

    overflow: hidden;
}

.dataGridFirstCell {
    /*border-left : none;*/
}

.dataGridLastCell {
    /*border-right : none;*/
    /* the same as dataGridLastCell, dataGridLastHeaderCell, table.pvtTable thead tr th:last-of-type */
    border-right: 1px solid var(--grid-separator-border-color);
}

:root {
    /*override in StyleDefaults init*/
    --focused-cell-border-color: #000000;
}

.dataGridStickyCell {
    z-index: 1000;
}

.dataGridStickyHeader {
    position: sticky !important;
    z-index: 1001;
    background-color: var(--background-color);
}

.dataGridStickyFooter {
    position: sticky !important;
    z-index: 1000;
}

.dataGridStickyOverflow {
    z-index: 0;
}

.focusedCellRightBorder {
    border-right: var(--border-width) solid var(--focused-cell-border-color);
}

.focusedCellBottomBorder {
    border-bottom: var(--border-width) solid var(--focused-cell-border-color) !important;
}

.leftNeighbourRightBorder {
    border-right: var(--border-width) solid var(--focused-cell-border-color);
}
