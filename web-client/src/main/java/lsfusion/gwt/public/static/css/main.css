:root {
    --button-border-radius: 0.25rem;
    --combobox-border-radius: 0.1875rem;
    --textfield-border-radius: var(--combobox-border-radius);
    --table-border-radius: var(--combobox-border-radius);
    --panel-border-radius: var(--combobox-border-radius);
    --tab-border-radius-vert: 0 0 var(--combobox-border-radius) var(--combobox-border-radius);
    --tab-border-radius-horz: var(--combobox-border-radius) var(--combobox-border-radius) 0 0;
    --border-padding: 0.125rem;
    --border-width: 1px;
}

body {
    font-family: 'Segoe UI', 'Open Sans', Arial Unicode MS, Arial, sans-serif;
    font-size: 9pt;
}

input,
button,
select,
optgroup,
textarea {
    font-family: inherit;
    font-size: inherit;
}

body, html {
    margin: 0;
}

pre {
    font-family: "courier new", courier, sans-serif;
    font-size: small;
}
body {
    color: var(--text-color);
    margin: 10px;
    border: 0px;
    padding: 0px;
    direction: ltr;
}

/* this is is a hack class, when we want to inherit background-color but not the immediate parent, but the first non-transparent parent */
.background-inherit {
}

body, body .background-inherit {
    background-color: var(--background-color);
}

a, a:visited {
    color: var(--focus-color);
    text-decoration:none;
}

a:hover {
    color: var(--focus-color);
    text-decoration:underline;
}

select {
    background: var(--component-background-color);
    color: var(--text-color);
    border: 1px solid var(--component-border-color);
    border-radius: var(--combobox-border-radius);
}

select option {
    background: var(--component-background-color);
}

select:focus {
    border: 1px solid var(--focus-color);
}

input, textarea {
    background-color: var(--component-background-color);
    color: var(--text-color);

    border-width: 0;
}

img,
svg {
    vertical-align: middle;
}

/* ------------ Scrollbars ------------ */
body {
    /*firefox*/
    scrollbar-color: var(--scrollbar-color) var(--component-background-color);
    scrollbar-width: thin;
    /*ie*/
    scrollbar-face-color: var(--scrollbar-color);
    scrollbar-arrow-color: var(--component-border-color);
}

::-webkit-scrollbar-track {
    background: transparent;
}

::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.5rem;
}

::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-color);
}

::-webkit-scrollbar-thumb:hover {
    background: var(--component-border-color);
}

::-webkit-scrollbar-corner {
    background: transparent;
}

.gwt-HTML {
    padding: 0 0;
}

/* ------------ Align ----------------- */
.align-items-start {
    align-items: flex-start !important;
}

.align-items-end {
    align-items: flex-end !important;
}

.align-items-center {
    align-items: center !important;
}

/* ------------ Default gwt overrides ------------ */
:focus {
    outline: 0;
}

.mobileFormsTabPanel > .nav-tabs-horz {
    padding-top: 0;
    padding-bottom: var(--border-padding);
}

.mobileFormsTabPanel > .nav-tabs-horz .tabBarItemsWrapper {
    flex-wrap: nowrap !important;
    overflow-x: auto;

    scrollbar-width: none;  /* hide scrollbars in Firefox */
}
.mobileFormsTabPanel > .nav-tabs-horz .tabBarItemsWrapper::-webkit-scrollbar {
    display: none;  /* hide scrollbars in Safari and Chrome */
}

.mobileFormsTabPanel > .nav-tabs-horz .nav-item {
    border-top: none;
    border-bottom: 1px solid var(--panel-border-color);
    border-radius: var(--tab-border-radius-vert);
}

.mobileFormsTabPanel > .nav-tabs-horz .nav-item:hover {
    border-bottom: 1px solid var(--component-hover-border-color);
}

.mobileFormsTabPanel > .tab-pane {
    padding-top: 0;
    padding-bottom: var(--border-padding);
    border-top: none;
    border-bottom: 1px solid var(--panel-border-color);
}


/* ------------ Message box styles ------------ */
.messageBox-button {
    width: 5.625rem;
}

.messageBox-messageContainer {
    height: auto;
    overflow: auto;
    padding: 0.3125rem 0.3125rem 0.4375rem 0.3125rem;
}

/* ------------ Error box styles ------------ */
.errorBox-button {
    margin: 0.1875rem 0.1875rem 0.3125rem;
}

.errorBox-stackBox {
    resize: none;
    white-space: nowrap;
}

.errorBox-message {
    padding: 0.3125rem;
}


/* ------------ Cell Renderer related styles ------------ */

.logicalRendererCheckBox {
    /*margin: 0;*/
    pointer-events: none;
}

/* ------------ Panel Renderer related styles ------------ */
.dataPanelRendererPanel {
    white-space: nowrap;

    cursor: default; /* need this since text by default gets "editing" cursor, however it overrides for example resize cursor, but it's not clear what to do with it */
}

.propertyContainerPanel {
}

.notEmptyPanelLabel {
    margin-left: var(--border-padding);
    margin-right: var(--border-padding);
}

.alignPanelLabel {
    margin-top: var(--border-padding);
    margin-bottom: var(--border-padding);
}

.panelRendererValue {
    margin: var(--border-padding);
}

.property-toolbar-on-hover .hide {
    width:0;
    transition:width 200ms linear;
}

.property-toolbar-on-hover:hover .hide {
    width:100%;
    transition:width 200ms linear;
}

.panelRendererValueBoxed, .panelRendererValueBoxed .background-inherit {
    background: var(--component-background-color);
}

.panelRendererValueBoxed {
    border: 1px solid var(--component-border-color); /* should correspond to the result in ActionOrPropertyValue.setBaseSize */
}

.propertyPanelRendererValue {
}

.propertyPanelRendererValue.panelRendererValueBoxed {
    border-radius: var(--textfield-border-radius);
    overflow: hidden; /* to hide inner corners */
}

.actionPanelRendererValue.panelRendererValueBoxed {
    border-radius: var(--button-border-radius);
}


.panelRendererValueEdited {
}

.panelRendererValueFocused.panelRendererValueBoxed:not(.panelRendererValueEdited),
.panelRendererValueFocused.panelRendererValueBoxed:not(.panelRendererValueEdited) .background-inherit, button:focus {
    background-color: var(--selection-color);
}

.panelRendererValueFocused.panelRendererValueBoxed, .actionPanelRendererValue:focus {
    border: 1px solid var(--focus-color);
}

.panelRendererValueBoxed:hover:not(.panelRendererValueFocused), .actionPanelRendererValue:hover:not(focus) { /* we want focus to have higher priority than hover*/
    border: 1px solid var(--component-hover-border-color);
}

.panelRendererValueBinding, .panelRendererValueBinding .background-inherit {
    background-color: var(--button-active-background-color);
}

/* ------------ Caption panel ------------ */

.leftBorder {
    border-left: var(--border-width) solid var(--panel-border-color);

    margin-left: calc(0px - var(--border-width) - var(--border-padding));
    padding-left: var(--border-padding);
}
.topBorder {
    border-top: 1px solid var(--panel-border-color);

    padding-top: var(--border-padding);
}
/* margin and not padding because we want the opposite borders to respect this padding */
/* also to have correct size / scroll when right component is wrapped */
.rightBorderNoWrap {
    margin-right: calc(var(--border-padding) + var(--border-padding));
}
.flexHorzBorderWrap {
    column-gap : calc(var(--border-padding) + var(--border-padding));
}
.bottomBorder {
    margin-bottom: var(--border-padding);
}

/* we can't use topborder because it is removed in autoDrawBorders */
.captionPanelNotNullLegend {
    border-top: 1px solid var(--panel-border-color);
}

.captionPanel {
    position: relative;
}

.captionLegendContainerPanel {
    position: relative;
}
.captionPanelLegend {
    white-space: nowrap;
    /*background-color: var(--background-color);*/
    color: var(--caption-panel-legend-color);
}

.notNullCaptionPanelLegend {
    padding-top: var(--border-padding);
    padding-bottom: var(--border-padding);
}

.notEmptyCaptionPanelLegend {
    /*margin-left: 0.25rem;*/
    /*margin-right: 0.25rem;*/

    padding-left: 0.25rem;
    padding-right: 0.25rem;
}

.captionCenteredLine {
    /*position: absolute;*/
    /*top : 50%;*/
    /*bottom: 0;*/
    /*left: 0;*/
    /*right: 0;*/
    /*z-index: -1;*/

    border-top: 1px solid var(--panel-border-color);
}

.rightCaptionCenteredLine {
    flex-grow : 1 !important;
}

.collapsePanelImage {
    cursor: default;
    /*margin-top: var(--border-padding);*/
    /*background: var(--background-color);*/
}

/* ------------ Form "dockables"  ------------ */
.dockableBlockingMask {
    background: black;
    opacity: 0.3;
    z-index: 10000;
}

/* ------------ Filters ------------ */
.form-check .form-check-input {
    float: left;
}

.filter-group-check.form-check {
    margin-left: 0.25rem; /*do not clip box shadowing*/
    margin-right: 0.125rem;
}

.userFilterNegationCheckBox label {
    vertical-align: middle;
}

.filter-group-select.form-select {
    width: auto;
    margin: 0.25rem; /*do not clip box shadowing*/
}

.userFilterLabel {
    cursor: default;
    margin: 0 0.1875rem 0 0.3125rem;
}

.userFilterListBox, .userFilterDataPropertyValue, .userFilterSelector, .userFilterButton {
    margin-left: var(--border-padding);
}

/* mimicry of propertyPanelRendererValue / panelRendererValue, CELL_HORIZONTAL_PADDING (textbasedCellRenderer) */
.userFilterSelector {
    cursor : default;
    border: 1px solid var(--component-border-color);
    margin: var(--border-padding);
    border-radius: var(--textfield-border-radius);

    padding-left: 0.1875rem;
    padding-right: 0.1875rem;

    /* aligning text vertically (the other way with line-height) */
    display : flex;
    align-items : center;
}

.userFilterSelector, .userFilterSelector .background-inherit {
    background-color: var(--component-background-color);
}

.userFilerValueCellApplied, .userFilerValueCellApplied .background-inherit {
    background-color: var(--selection-color);
}

.userFilterNegationCheckBox input {
    margin-left: 0.1875rem;
}

.userFilterJunctionSeparator {
    margin: 0 0.4375rem 0 0.75rem;
}


/* ------------ Loading blocker  ------------ */
.messageCanvas {
    position: absolute;
    background-color: rgba(226, 226, 226, 0.74);
    padding: 0.5rem;
    overflow: hidden;
}

.messageLabel {
    word-wrap: break-word;
}

.busyDialog {
    text-align: center;
}

.stackMessage {
    margin: 0.3125rem 0.3125rem 0.3125rem 0.3125rem;
    border: 1px solid var(--panel-border-color);
    padding: 0.3125rem;
    overflow-wrap: break-word;
    word-wrap: break-word;
    /*!* Умный разбор длинных строк без пробелов по словам *!*/
    word-break: break-word;
}


/* ------------ Leaflet components  ------------ */
.leaflet-container {
    /*border: 1px solid var(--component-border-color);*/
}

.leaflet-popup-content-wrapper, .leaflet-popup-tip {
    background: var(--background-color);
    color: var(--text-color);
}

.leaflet-popup-content-wrapper {
    border-radius: unset;
}

.leaflet-bar {
    border-radius: 0;
}

.leaflet-popup-content {
    margin: 17px;
}

.leaflet-popup-scrolled {
    border-bottom: 1px solid var(--component-border-color);
    border-top: 1px solid var(--component-border-color);
}

.leaflet-bar a, .leaflet-bar a:first-child:hover {
    border-bottom: 1px solid var(--component-border-color);
}

.leaflet-bar a:hover {
    background-color: var(--component-hover-background-color) !important;
}

.leaflet-control-zoom-in, .leaflet-control-zoom-out {
    color: var(--text-color) !important;
    background-color: var(--background-color) !important;
}

.leaflet-container .leaflet-control-attribution {
    background-color: var(--leaflet-control-transparent-background);
    color: var(--text-color);
}

.leaflet-bar a {
    border-radius: unset !important;
}

.leaflet-marker-icon img {
    position: absolute;
    bottom: 0;
    left: 50%;
    -webkit-transform: translateX(-50%);
    transform: translateX(-50%);
}

.leaflet-edit-marker-selected {
    border-color: transparent;
    background: none;
}

.leaflet-marker-cluster {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    position: absolute;
    left: -15px; /* -half size + margin marker icon (6) - border */
    top: -15px; /* -half size + margin marker icon (6) - border */
    border: 1px solid var(--component-border-color);
}

.leaflet-marker-cluster-text {
    padding: 10px 0;
    font-weight: bold;
    color: white;
    text-shadow: 0 0 5px black;
    text-align: center;
}

/* ------------ Other components  ------------ */
.gridSizePanel{
}

.gridContainerPanel{
    margin: var(--border-padding);
}

.gridContainerPanelBoxed, .gridContainerPanelBoxed .background-inherit {
    background: var(--component-background-color);
}
.gridContainerPanelBoxed {
    border: 1px solid var(--component-border-color);
    border-radius: var(--table-border-radius);
}

.gridContainerPanelFocused {
}
.gridContainerPanelBoxed.gridContainerPanelFocused {
    /*background-color: var(--selection-color);*/
    border: 1px solid var(--focus-color);
}
.gridContainerPanelBoxed:hover:not(.gridContainerPanelFocused) { /* we want focus to have higher priority than hover*/
    border: 1px solid var(--component-hover-border-color);
}

.btn-toolbar {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
}

.btn-toolbar .btn {
    border: 0;
    background: transparent;

    padding: 0 0.25em;

    margin-left: var(--border-padding);
    margin-right: var(--border-padding);
}

.btn-toolbar .btn:hover {
    background-color: var(--component-hover-background-color);
}

.logPanel {
    white-space: nowrap;
}

.errorLogMessage {
    color: #ff4500;
}

.boxSized {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.noOutline {
    outline: none;
}

.nullValueString {
    color: var(--null-value-string-color);
}

.requiredValueString {
    color: var(--required-value-string-color);

    /* need this for notNullLine absolute positioning (see below) */
    position: relative;
}

.notNullLine {
    background: var(--not-null-line-color);
    height: 1px;
    bottom: 2px;
    right:0;
    left:0;
    margin: 0 0.3125rem;
    position:absolute;
}

.floatRight {
    float: right;
}

.filterDialogButton {
    margin: 0;
    height: 1.3125rem;
    width: 1.3125rem;
}

.imageButtonWithoutCaption {
    padding: 0.0625rem;
}

.verticalStretchSeparator {
    border-left: 1px solid var(--panel-border-color);
    margin: 0.1875rem 0;
    padding: 0 0.125rem;
    align-self: stretch;
}

.verticalSeparator {
    border-left: 1px solid var(--panel-border-color);
}

.horizontalSeparator {
    width: 100%;
    border-bottom: 1px solid var(--panel-border-color);
}

.js-plotly-plot {
    width: 100%;
    height: 100%;
}

/* we want to turn cell to hyper link*/
.linkMode .selectedCellHasEdit {
    color: var(--link-color) !important;
    cursor: pointer !important;
}

.linkMode .selectedCellHasEdit:hover {
    text-decoration: underline;
}

.linkMode .selectedFileCellHasEdit {
    border: 1px solid var(--link-color);
}