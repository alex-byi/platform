MODULE Icon;

REQUIRE Utils, Reflection;

// Icon properties

CLASS Icon;
iconName '{icon.name}' = DATA STRING (Icon);
label '{icon.label}' = DATA STRING (Icon);
terms '{icon.terms}' = DATA STRING (Icon);
synonyms '{icon.synonyms}' = DATA STRING (Icon);
free '{icon.free.class}' = DATA STRING (Icon);
iconClass(Icon i) = (IF free(i) = 'brands' THEN 'fa-brands' ELSE 'fa') + ' fa-' + iconName(i);
vector '{icon.vector}' (Icon i) = tsVector(label(i), terms(i), synonyms(i)) MATERIALIZED;
nameToIconQuery(STRING s) = splitCamelCase(s, ' | ');
rank(STRING s, Icon i) = tsRank(vector(i), nameToIconQuery(s));

// Searching the best icon

bestIconNames = DATA LOCAL BOOLEAN (STRING); // input
bestIconClasses = DATA LOCAL STRING (STRING); // output
bestIconRanks = DATA LOCAL DOUBLE (STRING); // output
getBestIcons() {
    FOR bestIconNames(STRING s) AND Icon lastIcon = (GROUP LAST Icon icn IF vector(icn) MATCH nameToIconQuery(s) ORDER rank(s, icn)) DO {
        bestIconClasses(s) <- iconClass(lastIcon);
        bestIconRanks(s) <- rank(s, lastIcon);
    }
}

// Icon import

data_id_terms = DATA LOCAL STRING (INTEGER);
data_id_synonyms = DATA LOCAL STRING (INTEGER);
data_id_free = DATA LOCAL STRING (INTEGER);
term = DATA LOCAL STRING(INTEGER);
synonym = DATA LOCAL STRING(INTEGER);
free = DATA LOCAL STRING(INTEGER);
label = DATA LOCAL STRING(STRING);

FORM importIcons
    OBJECTS data=STRING EXTKEY

    PROPERTIES(data) label

    OBJECTS terms=INTEGER
    PROPERTIES(terms) term EXTID 'value'
    FILTERS data_id_terms(terms) == data

    OBJECTS synonyms=INTEGER
    PROPERTIES (synonyms) synonym EXTID 'value'
    FILTERS data_id_synonyms(synonyms) == data

    OBJECTS free=INTEGER
    PROPERTIES (free) free EXTID 'value'
    FILTERS data_id_free(free) == data
;

icon(iconName) = GROUP AGGR Icon icn BY iconName(icn);
terms(STRING iconName) = GROUP CONCAT term(INTEGER i) IF data_id_terms(i) == iconName, ' ' ORDER i;
synonyms(STRING iconName) = GROUP CONCAT synonym(INTEGER i) IF data_id_synonyms(i) == iconName, ' ' ORDER i;
free(STRING iconName) = GROUP CONCAT free(INTEGER i) IF data_id_free(i) == iconName, ' ' ORDER i;

iconName = GROUP MAX STRING s BY label(s);
importIcons '{icon.import.json}' () {
    readResource('/web/icons_with_synonyms.json');
    IF resource() THEN {
        IMPORT importIcons JSON FROM resource();

        FOR iconName(STRING s) AND NOT icon(iconName(s)) NEW icn = Icon DO {
            iconName(icn) <- iconName(s);
        }

        FOR iconName(Icon icn) == iconName(STRING s) DO {
            label(icn) <- lower(s);
            terms(icn) <- lower(terms(iconName(icn)));
            synonyms(icn) <- lower(synonyms(iconName(icn)));
            free(icn) <-  free(iconName(icn));
        }

        DELETE Icon icn WHERE icn IS Icon AND NOT [ GROUP SUM 1 BY iconName(STRING s)](iconName(icn));

        APPLY;
    }
}

// Icons form

search '{icon.action.name}' = DATA LOCAL STRING ();
message(Icon i) { MESSAGE iconName(i); }
FORM icons '{navigator.icon}' 
    PROPERTIES() importIcons, search ON CHANGE {
        INPUT s = search() CHANGE DO {
            bestIconNames(s) <- TRUE;
            getBestIcons();
        }
    } 
    PROPERTIES bestIconClass '{icon.best.icon.name}' = bestIconClasses(search())  READONLY IMAGE bestIconClasses(search()), bestIconRank '{icon.best.icon.rank}' = bestIconRanks(search()) READONLY 
    OBJECTS i = Icon 
    PROPERTIES iconImage '{icon.icon}' = message(i) IMAGE iconClass(i) GRID, rank '{icon.rank}' = rank(search(), i) 
    PROPERTIES(i) READONLY iconName, label, terms, synonyms, free, vector
    PROPERTIES (i) DELETE
;

DESIGN icons {
    OBJECTS {
        NEW import {
            MOVE PROPERTY(importIcons()) {
                fontSize = 36;
            }
        }
        NEW search {
            MOVE PROPERTY(search()) {
                fontSize = 36;
                width = 500;
            }
        }
        NEW bestIcon {
            MOVE PROPERTY(bestIconClass) {
                fontSize = 36;
                width = 500;
            }
            MOVE PROPERTY(bestIconRank) {
                fontSize = 36;
                width = 500;
            }
        }
        NEW icons {
            fill = 1;
            MOVE BOX(i);
        }
    }
}

NAVIGATOR {
    system {
        NEW icons AFTER metadata;
    }
}