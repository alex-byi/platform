MODULE Icon;

REQUIRE Utils, Reflection;

// Icon properties

CLASS Icon;
iconName '{icon.name}' = DATA STRING (Icon) INDEXED;
explicit = DATA STRING (Icon);
label '{icon.label}' = DATA STRING (Icon);
terms '{icon.terms}' = DATA STRING (Icon);
synonyms '{icon.synonyms}' = DATA STRING (Icon);
styles '{icon.free.class}' = DATA STRING (Icon);
searchStyles(Icon i) = IF styles(i) = 'bi' THEN 'lsfreg'
                              ELSE IF styles(i) = 'brands' THEN '' 
                              ELSE 'lsfsol' + (IF styles(i) LIKE '%regular%' THEN ' lsfreg' ELSE ('' IF i IS Icon)) MATERIALIZED;  
iconClass(STRING s, Icon i) = IF styles(i) = 'bi' THEN 'bi bi-' + iconName(i)
                              ELSE ((IF styles(i) = 'brands' THEN 'fa-brands'
                              ELSE (IF endsWith(s, 'Lsfreg') AND styles(i) LIKE '%regular%' THEN 'fa-regular' ELSE 'fa')) + ' fa-' + iconName(i)); // should correspond AppServerImage.createDefaultImage -> getBestIcon param
vector '{icon.vector}' (Icon i) = tsVector(explicit(i), label(i), terms(i), CONCAT ' ', synonyms(i), searchStyles(i)) MATERIALIZED INDEXED MATCH;
nameToIconQuery(STRING s) = splitCamelCase(s, ' | ');

// Searching the best icon

bestIconNames = DATA LOCAL BOOLEAN (STRING); // input
bestIconClasses = DATA LOCAL STRING (STRING); // output
bestIconRanks = DATA LOCAL DOUBLE (STRING); // output
getBestIcons() {
    // materializing tsqueries since postgres won't do that
    LOCAL bestIconMatchQueries = TSQUERY (STRING);
    LOCAL bestIconRankQueries = TSQUERY (STRING);
    bestIconMatchQueries(STRING s) <- toTsQuery(nameToIconQuery(left(s, length(s) - 6))) WHERE bestIconNames(s);  // should correspond AppServerImage.createDefaultImage -> getBestIcon param
    bestIconRankQueries(STRING s) <- toTsQuery(nameToIconQuery(s)) WHERE bestIconNames(s);
    
    FOR TSQUERY mq = bestIconMatchQueries(STRING s) AND TSQUERY rq = bestIconRankQueries(s) AND Icon lastIcon = (GROUP LAST Icon icn IF vector(icn) MATCH mq ORDER tsRank(vector(icn), rq)) DO {
        bestIconClasses(s) <- iconClass(s, lastIcon);
        bestIconRanks(s) <- tsRank(vector(lastIcon), rq);
    }
}

// Icon import

data_id_terms = DATA LOCAL STRING (INTEGER);
data_id_synonyms = DATA LOCAL STRING (INTEGER);
data_id_free = DATA LOCAL STRING (INTEGER);
term = DATA LOCAL STRING(INTEGER);
synonym = DATA LOCAL STRING(INTEGER);
free = DATA LOCAL STRING(INTEGER);
label = DATA LOCAL STRING(STRING);

FORM importIcons
    OBJECTS data=STRING EXTKEY

    PROPERTIES(data) label

    OBJECTS terms=INTEGER
    PROPERTIES(terms) term EXTID 'value'
    FILTERS data_id_terms(terms) == data

    OBJECTS synonyms=INTEGER
    PROPERTIES (synonyms) synonym EXTID 'value'
    FILTERS data_id_synonyms(synonyms) == data

    OBJECTS free=INTEGER
    PROPERTIES (free) free EXTID 'value'
    FILTERS data_id_free(free) == data
;

icon(iconName) = GROUP AGGR Icon icn BY iconName(icn);
terms(STRING iconName) = GROUP CONCAT term(INTEGER i) IF data_id_terms(i) == iconName, ' ' ORDER i;
synonyms(STRING iconName) = GROUP CONCAT synonym(INTEGER i) IF data_id_synonyms(i) == iconName, ' ' ORDER i;
free(STRING iconName) = GROUP CONCAT free(INTEGER i) IF data_id_free(i) == iconName, ' ' ORDER i;

iconName = GROUP MAX STRING s BY label(s);
bi = DATA LOCAL BOOLEAN ();
importIconsBI '{icon.import.json}' () {
    readResource('/web/' + (IF bi() THEN 'bi_' ELSE '') + 'icons_with_synonyms.json');
    IMPORT importIcons JSON FROM resource();

    FOR iconName(STRING s) AND NOT icon(iconName(s)) NEW icn = Icon DO {
        iconName(icn) <- iconName(s);

        IF bi() THEN
            styles(icn) <- 'bi';
    }

    FOR iconName(Icon icn) = iconName(STRING s) AND 
        (IF bi() THEN styles(icn) = 'bi' ELSE NOT styles(icn) = 'bi') INLINE DO {
        label(icn) <- lower(s);
        terms(icn) <- lower(terms(iconName(icn)));
        synonyms(icn) <- lower(synonyms(iconName(icn)));
        IF NOT bi() THEN
            styles(icn) <- free(iconName(icn));
    }

    DELETE Icon icn WHERE icn IS Icon AND 
        (IF bi() THEN styles(icn) = 'bi' ELSE NOT styles(icn) = 'bi') AND 
        NOT [ GROUP SUM 1 BY iconName(STRING s)](iconName(icn));

    APPLY;
}

importIcons '{icon.import.json}' () {
    importIconsBI(); // importing font awesome
    bi() <- TRUE;
    importIconsBI(); // importing bootstrap icons
    
    // updating properties
    LOCAL allProperties = STRING (STRING);
    readResourcePaths('/[^/]*Icons\\.properties');
    FOR resourcePaths(STRING path) DO {
        readResource(path);
        
        readProperties(RAWFILE(resource()));
        
        allProperties(STRING s) <- properties(s) WHERE properties(s);        
    }

    explicit(Icon icn) <- [GROUP CONCAT splitCamelCase(STRING s AS STRING, ' ') , ' ' ORDER s BY allProperties(s)](iconName(icn));
    
    APPLY;
}

// Icons form

search '{icon.action.name}' = DATA LOCAL STRING ();
FORM icons '{navigator.icon}' 
    PROPERTIES() importIcons, search ON CHANGE {
        INPUT s = search() CHANGE DO {
            bestIconNames(s) <- TRUE;
            getBestIcons();
        }
    } 
    PROPERTIES bestIconClass '{icon.best.icon.name}' = bestIconClasses(search())  READONLY IMAGE bestIconClasses(search()), bestIconRank '{icon.best.icon.rank}' = bestIconRanks(search()) READONLY 
    OBJECTS i = Icon 
    PROPERTIES iconImage '{icon.icon}' = {} IMAGE iconClass(search(), i) GRID, rank '{icon.rank}' = tsRank(vector(i), nameToIconQuery(search())) 
    PROPERTIES(i) READONLY iconName, explicit, label, terms, synonyms, styles, vector
    PROPERTIES (i) DELETE
;

DESIGN icons {
    OBJECTS {
        NEW import {
            MOVE PROPERTY(importIcons()) {
                fontSize = 36;
            }
        }
        NEW search {
            MOVE PROPERTY(search()) {
                fontSize = 36;
                width = 500;
            }
        }
        NEW bestIcon {
            MOVE PROPERTY(bestIconClass) {
                fontSize = 36;
                width = 500;
            }
            MOVE PROPERTY(bestIconRank) {
                fontSize = 36;
                width = 500;
            }
        }
        NEW icons {
            fill = 1;
            MOVE BOX(i);
        }
    }
}

NAVIGATOR {
    system {
        NEW icons AFTER metadata;
    }
}